/*
 * This file is generated by jOOQ.
 */
package org.wallet.dao.domain.tables;


import java.util.Arrays;
import java.util.Collection;
import java.util.List;

import org.jooq.Check;
import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.Name;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;
import org.wallet.dao.domain.Keys;
import org.wallet.dao.domain.Public;
import org.wallet.dao.domain.tables.records.WalletRecord;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Wallet extends TableImpl<WalletRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.wallet</code>
     */
    public static final Wallet WALLET = new Wallet();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<WalletRecord> getRecordType() {
        return WalletRecord.class;
    }

    /**
     * The column <code>public.wallet.amount</code>.
     */
    public final TableField<WalletRecord, Long> AMOUNT = createField(DSL.name("amount"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.wallet.uuid</code>.
     */
    public final TableField<WalletRecord, java.util.UUID> UUID = createField(DSL.name("uuid"), SQLDataType.UUID.nullable(false), this, "");

    private Wallet(Name alias, Table<WalletRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Wallet(Name alias, Table<WalletRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.wallet</code> table reference
     */
    public Wallet(String alias) {
        this(DSL.name(alias), WALLET);
    }

    /**
     * Create an aliased <code>public.wallet</code> table reference
     */
    public Wallet(Name alias) {
        this(alias, WALLET);
    }

    /**
     * Create a <code>public.wallet</code> table reference
     */
    public Wallet() {
        this(DSL.name("wallet"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public UniqueKey<WalletRecord> getPrimaryKey() {
        return Keys.WALLET_PKEY;
    }

    @Override
    public List<Check<WalletRecord>> getChecks() {
        return Arrays.asList(
            Internal.createCheck(this, DSL.name("wallet_amount_check"), "((amount >= 0))", true)
        );
    }

    @Override
    public Wallet as(String alias) {
        return new Wallet(DSL.name(alias), this);
    }

    @Override
    public Wallet as(Name alias) {
        return new Wallet(alias, this);
    }

    @Override
    public Wallet as(Table<?> alias) {
        return new Wallet(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(String name) {
        return new Wallet(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(Name name) {
        return new Wallet(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Wallet rename(Table<?> name) {
        return new Wallet(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet where(Condition condition) {
        return new Wallet(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallet where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallet where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallet where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Wallet where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Wallet whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
